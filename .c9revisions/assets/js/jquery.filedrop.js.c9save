{"ts":1350186075594,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\r\n * Default text - jQuery plugin for html5 dragging files from desktop to browser\r\n *\r\n * Author: Weixi Yen\r\n *\r\n * Email: [Firstname][Lastname]@gmail.com\r\n * \r\n * Copyright (c) 2010 Resopollution\r\n * \r\n * Licensed under the MIT license:\r\n *   http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * Project home:\r\n *   http://www.github.com/weixiyen/jquery-filedrop\r\n *\r\n * Version:  0.1.0\r\n *\r\n * Features:\r\n *      Allows sending of extra parameters with file.\r\n *      Works with Firefox 3.6+\r\n *      Future-compliant with HTML5 spec (will work with Webkit browsers and IE9)\r\n * Usage:\r\n *     See README at project homepage\r\n *\r\n */\r\n(function($){\r\n\r\n\tjQuery.event.props.push(\"dataTransfer\");\r\n\tvar opts = {},\r\n\t\tdefault_opts = {\r\n\t\t\turl: '',\r\n\t\t\trefresh: 1000,\r\n\t\t\tparamname: 'userfile',\r\n\t\t\tmaxfiles: 25,\r\n\t\t\tmaxfilesize: 1, // MBs\r\n\t\t\tdata: {},\r\n\t\t\tdrop: empty,\r\n\t\t\tdragEnter: empty,\r\n\t\t\tdragOver: empty,\r\n\t\t\tdragLeave: empty,\r\n\t\t\tdocEnter: empty,\r\n\t\t\tdocOver: empty,\r\n\t\t\tdocLeave: empty,\r\n\t\t\tbeforeEach: empty,\r\n\t\t\tafterAll: empty,\r\n\t\t\trename: empty,\r\n\t\t\terror: function(err, file, i){alert(err);},\r\n\t\t\tuploadStarted: empty,\r\n\t\t\tuploadFinished: empty,\r\n\t\t\tprogressUpdated: empty,\r\n\t\t\tspeedUpdated: empty\r\n\t\t},\r\n\t\terrors = [\"BrowserNotSupported\", \"TooManyFiles\", \"FileTooLarge\"],\r\n\t\tdoc_leave_timer,\r\n\t\tstop_loop = false,\r\n\t\tfiles_count = 0,\r\n\t\tfiles;\r\n\r\n\t$.fn.filedrop = function(options) {\r\n\t\topts = $.extend( {}, default_opts, options );\r\n\t\t\r\n\t\tthis.bind('drop', drop).bind('dragenter', dragEnter).bind('dragover', dragOver).bind('dragleave', dragLeave);\r\n\t\t$(document).bind('drop', docDrop).bind('dragenter', docEnter).bind('dragover', docOver).bind('dragleave', docLeave);\r\n\t};\r\n     \r\n\tfunction drop(e) {\r\n\t\topts.drop(e);\r\n\t\tfiles = e.dataTransfer.files;\r\n\t\tif (files === null || files === undefined) {\r\n\t\t\topts.error(errors[0]);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfiles_count = files.length;\r\n\t\tupload();\r\n\t\te.preventDefault();\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tfunction getBuilder(filename, filedata, boundary) {\r\n\t\tvar dashdash = '--',\r\n\t\t\tcrlf = '\\r\\n',\r\n\t\t\tbuilder = '';\r\n\r\n\t\t$.each(opts.data, function(i, val) {\r\n\t    \tif (typeof val === 'function') val = val();\r\n\t\t\tbuilder += dashdash;\r\n\t\t\tbuilder += boundary;\r\n\t\t\tbuilder += crlf;\r\n\t\t\tbuilder += 'Content-Disposition: form-data; name=\"'+i+'\"';\r\n\t\t\tbuilder += crlf;\r\n\t\t\tbuilder += crlf;\r\n\t\t\tbuilder += val;\r\n\t\t\tbuilder += crlf;\r\n\t\t});\r\n\t\t\r\n\t\tbuilder += dashdash;\r\n\t\tbuilder += boundary;\r\n\t\tbuilder += crlf;\r\n\t\tbuilder += 'Content-Disposition: form-data; name=\"'+opts.paramname+'\"';\r\n\t\tbuilder += '; filename=\"' + filename + '\"';\r\n\t\tbuilder += crlf;\r\n\t\t\r\n\t\tbuilder += 'Content-Type: application/octet-stream';\r\n\t\tbuilder += crlf;\r\n\t\tbuilder += crlf; \r\n\t\t\r\n\t\tbuilder += filedata;\r\n\t\tbuilder += crlf;\r\n        \r\n\t\tbuilder += dashdash;\r\n\t\tbuilder += boundary;\r\n\t\tbuilder += dashdash;\r\n\t\tbuilder += crlf;\r\n\t\treturn builder;\r\n\t}\r\n\r\n\tfunction progress(e) {\r\n\t\tif (e.lengthComputable) {\r\n\t\t\tvar percentage = Math.round((e.loaded * 100) / e.total);\r\n\t\t\tif (this.currentProgress != percentage) {\r\n\t\t\t\t\r\n\t\t\t\tthis.currentProgress = percentage;\r\n\t\t\t\topts.progressUpdated(this.index, this.file, this.currentProgress);\r\n\t\t\t\t\r\n\t\t\t\tvar elapsed = new Date().getTime();\r\n\t\t\t\tvar diffTime = elapsed - this.currentStart;\r\n\t\t\t\tif (diffTime >= opts.refresh) {\r\n\t\t\t\t\tvar diffData = e.loaded - this.startData;\r\n\t\t\t\t\tvar speed = diffData / diffTime; // KB per second\r\n\t\t\t\t\topts.speedUpdated(this.index, this.file, speed);\r\n\t\t\t\t\tthis.startData = e.loaded;\r\n\t\t\t\t\tthis.currentStart = elapsed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    \r\n\tfunction upload() {\r\n\t\tstop_loop = false;\r\n\t\tif (!files) {\r\n\t\t\topts.error(errors[0]);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvar filesDone = 0,\r\n\t\t\tfilesRejected = 0;\r\n\t\t\r\n\t\tif (files_count > opts.maxfiles) {\r\n\t\t    opts.error(errors[1]);\r\n\t\t    return false;\r\n\t\t}\r\n\r\n\t\tfor (var i=0; i<files_count; i++) {\r\n\t\t\tif (stop_loop) return false;\r\n\t\t\ttry {\r\n\t\t\t\tif (beforeEach(files[i]) != false) {\r\n\t\t\t\t\tif (i === files_count) return;\r\n\t\t\t\t\tvar reader = new FileReader(),\r\n\t\t\t\t\t\tmax_file_size = 1048576 * opts.maxfilesize;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\treader.index = i;\r\n\t\t\t\t\tif (files[i].size > max_file_size) {\r\n\t\t\t\t\t\topts.error(errors[2], files[i], i);\r\n\t\t\t\t\t\tfilesRejected++;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treader.onloadend = send;\r\n\t\t\t\t\treader.readAsBinaryString(files[i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfilesRejected++;\r\n\t\t\t\t}\r\n\t\t\t} catch(err) {\r\n\t\t\t\topts.error(errors[0]);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t    \r\n\t\tfunction send(e) {\r\n\t\t\t// Sometimes the index is not attached to the\r\n\t\t\t// event object. Find it by size. Hack for sure.\r\n\t\t\tif (e.target.index == undefined) {\r\n\t\t\t\te.target.index = getIndexBySize(e.total);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar xhr = new XMLHttpRequest(),\r\n\t\t\t\tupload = xhr.upload,\r\n\t\t\t\tfile = files[e.target.index],\r\n\t\t\t\tindex = e.target.index,\r\n\t\t\t\tstart_time = new Date().getTime(),\r\n\t\t\t\tboundary = '------multipartformboundary' + (new Date).getTime(),\r\n\t\t\t\tbuilder;\r\n\t\t\t\t\r\n\t\t\tnewName = rename(file.name);\r\n\t\t\tif (typeof newName === \"string\") {\r\n\t\t\t\tbuilder = getBuilder(newName, e.target.result, boundary);\r\n\t\t\t} else {\r\n\t\t\t\tbuilder = getBuilder(file.name, e.target.result, boundary);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tupload.index = index;\r\n\t\t\tupload.file = file;\r\n\t\t\tupload.downloadStartTime = start_time;\r\n\t\t\tupload.currentStart = start_time;\r\n\t\t\tupload.currentProgress = 0;\r\n\t\t\tupload.startData = 0;\r\n\t\t\tupload.addEventListener(\"progress\", progress, false);\r\n\t\t\t\r\n\t\t\txhr.open(\"POST\", opts.url, true);\r\n\t\t\txhr.setRequestHeader('content-type', 'multipart/form-data; boundary=' \r\n\t\t\t    + boundary);\r\n\t\t\t    \r\n\t\t\txhr.sendAsBinary(builder);  \r\n\t\t\t\r\n\t\t\topts.uploadStarted(index, file, files_count);  \r\n\t\t\t\r\n\t\t\txhr.onload = function() { \r\n\t\t\t    if (xhr.responseText) {\r\n\t\t\t\tvar now = new Date().getTime(),\r\n\t\t\t\t    timeDiff = now - start_time,\r\n\t\t\t\t    result = opts.uploadFinished(index, file, jQuery.parseJSON(xhr.responseText), timeDiff);\r\n\t\t\t\t\tfilesDone++;\r\n\t\t\t\t\tif (filesDone == files_count - filesRejected) {\r\n\t\t\t\t\t\tafterAll();\r\n\t\t\t\t\t}\r\n\t\t\t    if (result === false) stop_loop = true;\r\n\t\t\t    }\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n    \r\n\tfunction getIndexBySize(size) {\r\n\t\tfor (var i=0; i < files_count; i++) {\r\n\t\t\tif (files[i].size == size) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn undefined;\r\n\t}\r\n    \r\n\tfunction rename(name) {\r\n\t\treturn opts.rename(name);\r\n\t}\r\n\t\r\n\tfunction beforeEach(file) {\r\n\t\treturn opts.beforeEach(file);\r\n\t}\r\n\t\r\n\tfunction afterAll() {\r\n\t\treturn opts.afterAll();\r\n\t}\r\n\t\r\n\tfunction dragEnter(e) {\r\n\t\tclearTimeout(doc_leave_timer);\r\n\t\te.preventDefault();\r\n\t\topts.dragEnter(e);\r\n\t}\r\n\t\r\n\tfunction dragOver(e) {\r\n\t\tclearTimeout(doc_leave_timer);\r\n\t\te.preventDefault();\r\n\t\topts.docOver(e);\r\n\t\topts.dragOver(e);\r\n\t}\r\n\t \r\n\tfunction dragLeave(e) {\r\n\t\tclearTimeout(doc_leave_timer);\r\n\t\topts.dragLeave(e);\r\n\t\te.stopPropagation();\r\n\t}\r\n\t \r\n\tfunction docDrop(e) {\r\n\t\te.preventDefault();\r\n\t\topts.docLeave(e);\r\n\t\treturn false;\r\n\t}\r\n\t \r\n\tfunction docEnter(e) {\r\n\t\tclearTimeout(doc_leave_timer);\r\n\t\te.preventDefault();\r\n\t\topts.docEnter(e);\r\n\t\treturn false;\r\n\t}\r\n\t \r\n\tfunction docOver(e) {\r\n\t\tclearTimeout(doc_leave_timer);\r\n\t\te.preventDefault();\r\n\t\topts.docOver(e);\r\n\t\treturn false;\r\n\t}\r\n\t \r\n\tfunction docLeave(e) {\r\n\t\tdoc_leave_timer = setTimeout(function(){\r\n\t\t\topts.docLeave(e);\r\n\t\t}, 200);\r\n\t}\r\n\t \r\n\tfunction empty(){}\r\n\t\r\n\ttry {\r\n\t\tif (XMLHttpRequest.prototype.sendAsBinary) return;\r\n\t\tXMLHttpRequest.prototype.sendAsBinary = function(datastr) {\r\n\t\t    function byteValue(x) {\r\n\t\t        return x.charCodeAt(0) & 0xff;\r\n\t\t    }\r\n\t\t    var ords = Array.prototype.map.call(datastr, byteValue);\r\n\t\t    var ui8a = new Uint8Array(ords);\r\n\t\t    this.send(ui8a.buffer);\r\n\t\t}\r\n\t} catch(e) {}\r\n     \r\n})(jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":7639}]],"length":7639}
{"contributors":[],"silentsave":false,"ts":1350186056460,"patch":[[{"diffs":[[1,"/*\r\n * Default text - jQuery plugin for html5 dragging files from desktop to browser\r\n *\r\n * Author: Weixi Yen\r\n *\r\n * Email: [Firstname][Lastname]@gmail.com\r\n * \r\n * Copyright (c) 2010 Resopollution\r\n * \r\n * Licensed under the MIT license:\r\n *   http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * Project home:\r\n *   http://www.github.com/weixiyen/jquery-filedrop\r\n *\r\n * Version:  0.1.0\r\n *\r\n * Features:\r\n *      Allows sending of extra parameters with file.\r\n *      Works with Firefox 3.6+\r\n *      Future-compliant with HTML5 spec (will work with Webkit browsers and IE9)\r\n * Usage:\r\n *     See README at project homepage\r\n *\r\n */\r\n(function($){\r\n\r\n\tjQuery.event.props.push(\"dataTransfer\");\r\n\tvar opts = {},\r\n\t\tdefault_opts = {\r\n\t\t\turl: '',\r\n\t\t\trefresh: 1000,\r\n\t\t\tparamname: 'userfile',\r\n\t\t\tmaxfiles: 25,\r\n\t\t\tmaxfilesize: 1, // MBs\r\n\t\t\tdata: {},\r\n\t\t\tdrop: empty,\r\n\t\t\tdragEnter: empty,\r\n\t\t\tdragOver: empty,\r\n\t\t\tdragLeave: empty,\r\n\t\t\tdocEnter: empty,\r\n\t\t\tdocOver: empty,\r\n\t\t\tdocLeave: empty,\r\n\t\t\tbeforeEach: empty,\r\n\t\t\tafterAll: empty,\r\n\t\t\trename: empty,\r\n\t\t\terror: function(err, file, i){alert(err);},\r\n\t\t\tuploadStarted: empty,\r\n\t\t\tuploadFinished: empty,\r\n\t\t\tprogressUpdated: empty,\r\n\t\t\tspeedUpdated: empty\r\n\t\t},\r\n\t\terrors = [\"BrowserNotSupported\", \"TooManyFiles\", \"FileTooLarge\"],\r\n\t\tdoc_leave_timer,\r\n\t\tstop_loop = false,\r\n\t\tfiles_count = 0,\r\n\t\tfiles;\r\n\r\n\t$.fn.filedrop = function(options) {\r\n\t\topts = $.extend( {}, default_opts, options );\r\n\t\t\r\n\t\tthis.bind('drop', drop).bind('dragenter', dragEnter).bind('dragover', dragOver).bind('dragleave', dragLeave);\r\n\t\t$(document).bind('drop', docDrop).bind('dragenter', docEnter).bind('dragover', docOver).bind('dragleave', docLeave);\r\n\t};\r\n     \r\n\tfunction drop(e) {\r\n\t\topts.drop(e);\r\n\t\tfiles = e.dataTransfer.files;\r\n\t\tif (files === null || files === undefined) {\r\n\t\t\topts.error(errors[0]);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfiles_count = files.length;\r\n\t\tupload();\r\n\t\te.preventDefault();\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tfunction getBuilder(filename, filedata, boundary) {\r\n\t\tvar dashdash = '--',\r\n\t\t\tcrlf = '\\r\\n',\r\n\t\t\tbuilder = '';\r\n\r\n\t\t$.each(opts.data, function(i, val) {\r\n\t    \tif (typeof val === 'function') val = val();\r\n\t\t\tbuilder += dashdash;\r\n\t\t\tbuilder += boundary;\r\n\t\t\tbuilder += crlf;\r\n\t\t\tbuilder += 'Content-Disposition: form-data; name=\"'+i+'\"';\r\n\t\t\tbuilder += crlf;\r\n\t\t\tbuilder += crlf;\r\n\t\t\tbuilder += val;\r\n\t\t\tbuilder += crlf;\r\n\t\t});\r\n\t\t\r\n\t\tbuilder += dashdash;\r\n\t\tbuilder += boundary;\r\n\t\tbuilder += crlf;\r\n\t\tbuilder += 'Content-Disposition: form-data; name=\"'+opts.paramname+'\"';\r\n\t\tbuilder += '; filename=\"' + filename + '\"';\r\n\t\tbuilder += crlf;\r\n\t\t\r\n\t\tbuilder += 'Content-Type: application/octet-stream';\r\n\t\tbuilder += crlf;\r\n\t\tbuilder += crlf; \r\n\t\t\r\n\t\tbuilder += filedata;\r\n\t\tbuilder += crlf;\r\n        \r\n\t\tbuilder += dashdash;\r\n\t\tbuilder += boundary;\r\n\t\tbuilder += dashdash;\r\n\t\tbuilder += crlf;\r\n\t\treturn builder;\r\n\t}\r\n\r\n\tfunction progress(e) {\r\n\t\tif (e.lengthComputable) {\r\n\t\t\tvar percentage = Math.round((e.loaded * 100) / e.total);\r\n\t\t\tif (this.currentProgress != percentage) {\r\n\t\t\t\t\r\n\t\t\t\tthis.currentProgress = percentage;\r\n\t\t\t\topts.progressUpdated(this.index, this.file, this.currentProgress);\r\n\t\t\t\t\r\n\t\t\t\tvar elapsed = new Date().getTime();\r\n\t\t\t\tvar diffTime = elapsed - this.currentStart;\r\n\t\t\t\tif (diffTime >= opts.refresh) {\r\n\t\t\t\t\tvar diffData = e.loaded - this.startData;\r\n\t\t\t\t\tvar speed = diffData / diffTime; // KB per second\r\n\t\t\t\t\topts.speedUpdated(this.index, this.file, speed);\r\n\t\t\t\t\tthis.startData = e.loaded;\r\n\t\t\t\t\tthis.currentStart = elapsed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    \r\n\tfunction upload() {\r\n\t\tstop_loop = false;\r\n\t\tif (!files) {\r\n\t\t\topts.error(errors[0]);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvar filesDone = 0,\r\n\t\t\tfilesRejected = 0;\r\n\t\t\r\n\t\tif (files_count > opts.maxfiles) {\r\n\t\t    opts.error(errors[1]);\r\n\t\t    return false;\r\n\t\t}\r\n\r\n\t\tfor (var i=0; i<files_count; i++) {\r\n\t\t\tif (stop_loop) return false;\r\n\t\t\ttry {\r\n\t\t\t\tif (beforeEach(files[i]) != false) {\r\n\t\t\t\t\tif (i === files_count) return;\r\n\t\t\t\t\tvar reader = new FileReader(),\r\n\t\t\t\t\t\tmax_file_size = 1048576 * opts.maxfilesize;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\treader.index = i;\r\n\t\t\t\t\tif (files[i].size > max_file_size) {\r\n\t\t\t\t\t\topts.error(errors[2], files[i], i);\r\n\t\t\t\t\t\tfilesRejected++;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treader.onloadend = send;\r\n\t\t\t\t\treader.readAsBinaryString(files[i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfilesRejected++;\r\n\t\t\t\t}\r\n\t\t\t} catch(err) {\r\n\t\t\t\topts.error(errors[0]);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t    \r\n\t\tfunction send(e) {\r\n\t\t\t// Sometimes the index is not attached to the\r\n\t\t\t// event object. Find it by size. Hack for sure.\r\n\t\t\tif (e.target.index == undefined) {\r\n\t\t\t\te.target.index = getIndexBySize(e.total);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar xhr = new XMLHttpRequest(),\r\n\t\t\t\tupload = xhr.upload,\r\n\t\t\t\tfile = files[e.target.index],\r\n\t\t\t\tindex = e.target.index,\r\n\t\t\t\tstart_time = new Date().getTime(),\r\n\t\t\t\tboundary = '------multipartformboundary' + (new Date).getTime(),\r\n\t\t\t\tbuilder;\r\n\t\t\t\t\r\n\t\t\tnewName = rename(file.name);\r\n\t\t\tif (typeof newName === \"string\") {\r\n\t\t\t\tbuilder = getBuilder(newName, e.target.result, boundary);\r\n\t\t\t} else {\r\n\t\t\t\tbuilder = getBuilder(file.name, e.target.result, boundary);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tupload.index = index;\r\n\t\t\tupload.file = file;\r\n\t\t\tupload.downloadStartTime = start_time;\r\n\t\t\tupload.currentStart = start_time;\r\n\t\t\tupload.currentProgress = 0;\r\n\t\t\tupload.startData = 0;\r\n\t\t\tupload.addEventListener(\"progress\", progress, false);\r\n\t\t\t\r\n\t\t\txhr.open(\"POST\", opts.url, true);\r\n\t\t\txhr.setRequestHeader('content-type', 'multipart/form-data; boundary=' \r\n\t\t\t    + boundary);\r\n\t\t\t    \r\n\t\t\txhr.sendAsBinary(builder);  \r\n\t\t\t\r\n\t\t\topts.uploadStarted(index, file, files_count);  \r\n\t\t\t\r\n\t\t\txhr.onload = function() { \r\n\t\t\t    if (xhr.responseText) {\r\n\t\t\t\tvar now = new Date().getTime(),\r\n\t\t\t\t    timeDiff = now - start_time,\r\n\t\t\t\t    result = opts.uploadFinished(index, file, jQuery.parseJSON(xhr.responseText), timeDiff);\r\n\t\t\t\t\tfilesDone++;\r\n\t\t\t\t\tif (filesDone == files_count - filesRejected) {\r\n\t\t\t\t\t\tafterAll();\r\n\t\t\t\t\t}\r\n\t\t\t    if (result === false) stop_loop = true;\r\n\t\t\t    }\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n    \r\n\tfunction getIndexBySize(size) {\r\n\t\tfor (var i=0; i < files_count; i++) {\r\n\t\t\tif (files[i].size == size) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn undefined;\r\n\t}\r\n    \r\n\tfunction rename(name) {\r\n\t\treturn opts.rename(name);\r\n\t}\r\n\t\r\n\tfunction beforeEach(file) {\r\n\t\treturn opts.beforeEach(file);\r\n\t}\r\n\t\r\n\tfunction afterAll() {\r\n\t\treturn opts.afterAll();\r\n\t}\r\n\t\r\n\tfunction dragEnter(e) {\r\n\t\tclearTimeout(doc_leave_timer);\r\n\t\te.preventDefault();\r\n\t\topts.dragEnter(e);\r\n\t}\r\n\t\r\n\tfunction dragOver(e) {\r\n\t\tclearTimeout(doc_leave_timer);\r\n\t\te.preventDefault();\r\n\t\topts.docOver(e);\r\n\t\topts.dragOver(e);\r\n\t}\r\n\t \r\n\tfunction dragLeave(e) {\r\n\t\tclearTimeout(doc_leave_timer);\r\n\t\topts.dragLeave(e);\r\n\t\te.stopPropagation();\r\n\t}\r\n\t \r\n\tfunction docDrop(e) {\r\n\t\te.preventDefault();\r\n\t\topts.docLeave(e);\r\n\t\treturn false;\r\n\t}\r\n\t \r\n\tfunction docEnter(e) {\r\n\t\tclearTimeout(doc_leave_timer);\r\n\t\te.preventDefault();\r\n\t\topts.docEnter(e);\r\n\t\treturn false;\r\n\t}\r\n\t \r\n\tfunction docOver(e) {\r\n\t\tclearTimeout(doc_leave_timer);\r\n\t\te.preventDefault();\r\n\t\topts.docOver(e);\r\n\t\treturn false;\r\n\t}\r\n\t \r\n\tfunction docLeave(e) {\r\n\t\tdoc_leave_timer = setTimeout(function(){\r\n\t\t\topts.docLeave(e);\r\n\t\t}, 200);\r\n\t}\r\n\t \r\n\tfunction empty(){}\r\n\t\r\n\ttry {\r\n\t\tif (XMLHttpRequest.prototype.sendAsBinary) return;\r\n\t\tXMLHttpRequest.prototype.sendAsBinary = function(datastr) {\r\n\t\t    function byteValue(x) {\r\n\t\t        return x.charCodeAt(0) & 0xff;\r\n\t\t    }\r\n\t\t    var ords = Array.prototype.map.call(datastr, byteValue);\r\n\t\t    var ui8a = new Uint8Array(ords);\r\n\t\t    this.send(ui8a.buffer);\r\n\t\t}\r\n\t} catch(e) {}\r\n     \r\n})(jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":7639}]],"length":7639,"saved":false}
